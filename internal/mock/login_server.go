// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/raffops/chat/pb"
	mock "github.com/stretchr/testify/mock"
)

// LoginServer is an autogenerated mock type for the LoginServer type
type LoginServer struct {
	mock.Mock
}

// SignUp provides a mock function with given fields: _a0, _a1
func (_m *LoginServer) SignUp(_a0 context.Context, _a1 *pb.SignUpRequest) (*pb.SignUpResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 *pb.SignUpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignUpRequest) (*pb.SignUpResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignUpRequest) *pb.SignUpResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SignUpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.SignUpRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedLoginServer provides a mock function with given fields:
func (_m *LoginServer) mustEmbedUnimplementedLoginServer() {
	_m.Called()
}

// NewLoginServer creates a new instance of LoginServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginServer {
	mock := &LoginServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
