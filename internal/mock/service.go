// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	errs "github.com/raffops/chat/internal/errs"
	mock "github.com/stretchr/testify/mock"

	models "github.com/raffops/chat/internal/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, name, password
func (_m *Service) Login(ctx context.Context, name string, password string) (string, *errs.Err) {
	ret := _m.Called(ctx, name, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 *errs.Err
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, *errs.Err)); ok {
		return rf(ctx, name, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, name, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *errs.Err); ok {
		r1 = rf(ctx, name, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.Err)
		}
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: ctx, user
func (_m *Service) SignUp(ctx context.Context, user models.User) (models.User, *errs.Err) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 models.User
	var r1 *errs.Err
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.User, *errs.Err)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) *errs.Err); ok {
		r1 = rf(ctx, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.Err)
		}
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
